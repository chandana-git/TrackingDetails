 Kubernetes Installation on aws instances

Use 2 t2.medium instance(for centos)
--------------------------------------
On both the master and worker nodes:
-------------------------------------
sudo su
yum install docker -y 
systemctl enable docker && systemctl start docker

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=0
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
exclude=kube*
EOF

cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF

sysctl --system
setenforce 0

yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
systemctl enable kubelet && systemctl start kubelet


Only on the Master Node:
-----------------------
sudo kubeadm init --pod-network-cidr=192.168.0.0/16 --ignore-preflight-
errors=NumCPU #if less no of cpu t2.micro

 kubeadm init(if t2.medium)


  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

On Worker nodes:
--------------------
After initializing the cluster on the master node. copy kubeadm join command from output of kubeadm init on master node. (Switch to the root mode first)

sudo su
<kubeadm join command copies from master node>


kubeadm join 10.0.0.114:6443 --token upedj5.s4omdwx75sqss4se \
    --discovery-token-ca-cert-hash sha256:1bc1fa962cfce446926ffec198d8c497a53fa79f885fa056b94e016a24648382

Run this on both master and worker
----------------------------------------------
export KUBECONFIG=/etc/kubernetes/kubelet.conf

In master
[root@ip-10-0-0-114 centos]# kubectl get nodes
NAME                                       STATUS     ROLES    AGE     VERSION
ip-10-0-0-114.us-east-2.compute.internal   NotReady   master   6m44s   v1.18.3
ip-10-0-0-141.us-east-2.compute.internal   NotReady   <none>   117s    v1.18.3

((((The output of the command above will show both the nodes in NOTREADY state. That is because Kubernetes needs an “overlay network” so that pod-to-pod communication can happen properly. This overlay network is created by third-party CNI plugins. We are going to use Calico to create that overlay network.))))

 sudo kubectl apply -f https://docs.projectcalico.org/v3.14/manifests/calico.yaml
configmap/calico-config 
#refer https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/, Under Calico (Installing a Pod network add-on)

NOW ITS IN READY STATE

[root@ip-10-0-0-114 centos]# kubectl get nodes
NAME                                       STATUS   ROLES    AGE     VERSION
ip-10-0-0-114.us-east-2.compute.internal   Ready    master   9m16s   v1.18.3

[root@ip-10-0-0-114 centos]# kubectl get pods --all-namespaces
NAMESPACE     NAME                                                               READY   STATUS    RESTARTS   AGE
kube-system   calico-kube-controllers-76d4774d89-q7b6j                           1/1     Running   0          110s
kube-system   calico-node-7xj8f                                                  1/1     Running   0          110s
kube-system   calico-node-bq6sh                                                  1/1     Running   0          110s
kube-system   coredns-66bff467f8-wvmhc                                           1/1     Running   0          9m30s
kube-system   coredns-66bff467f8-xnz7b                                           1/1     Running   0          9m30s
kube-system   etcd-ip-10-0-0-114.us-east-2.compute.internal                      1/1     Running   0          9m37s
kube-system   kube-apiserver-ip-10-0-0-114.us-east-2.compute.internal            1/1     Running   0          9m37s
kube-system   kube-controller-manager-ip-10-0-0-114.us-east-2.compute.internal   1/1     Running   0          9m37s
kube-system   kube-proxy-rrktn                                                   1/1     Running   0          4m53s
kube-system   kube-proxy-v45ng                                                   1/1     Running   0          9m30s
kube-system   kube-scheduler-ip-10-0-0-114.us-east-2.compute.internal            1/1     Running   0          9m36s

============================================================================
In jenkins instance,install kubectl

[root@ip-10-0-3-33 centos]# cat <<EOF > /etc/yum.repos.d/kubernetes.repo
> [kubernetes]
> name=Kubernetes
> baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
> enabled=1
> gpgcheck=1
> repo_gpgcheck=1
> gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
> EOF
[root@ip-10-0-3-33 centos]# yum install -y kubectl

Copy from master
ls -la
cat $HOME/.kube/config==>(copy and paste)

#copy config file content here
mkdir .kube
ls -la
sudo nano .kube/config   <paste the content>
sudo -i -u jenkins   #switch user

now u can use kubectl cmds like kubectl get nodes/pods

[centos@ip-10-0-3-33 ~]$ kubectl get nodes
NAME                                       STATUS   ROLES    AGE   VERSION
ip-10-0-0-114.us-east-2.compute.internal   Ready    master   57m   v1.18.3
ip-10-0-0-141.us-east-2.compute.internal   Ready    <none>   53m   v1.18.3

Copy from master
ls -la
cat $HOME/.kube/config==>(copy and paste)

[centos@ip-10-0-3-33 ~]$ sudo su
[root@ip-10-0-3-33 centos]# cd .kube
[root@ip-10-0-3-33 .kube]# ls
config
[root@ip-10-0-3-33 .kube]# cp config /var/lib/jenkins/.kube  ##<copy config to /var/lib/jenkins/.kube>

and restart jenkins

sudo systemctl restart jenkins


In Jenkins Install Kubernetes continuous deployment plugin and other k8s plugins

Credentials>Add Credentials>

Kind:Kubernetes configuration

Copy from master
ls -la
cat $HOME/.kube/config==>(copy and paste)

id: kube_config
desc: kube_config

Kubeconfig->Enter directly<Paste the config content>



use the below stage in pipeline 
stage("Deploy To Kuberates Cluster"){
      sh 'kubectl create -f deploy.yml'
      sh 'kubectl create -f service.yml'
     }




links:
To install:-https://www.zekelabs.com/blog/how-to-install-kubernetes-cluster-on-aws-ec2-instances/
To follow the second step(use the second step) deploy step in jenkins pipeline for continuous deploy:https://www.youtube.com/watch?v=IluhOk86prA
Error while jenkins is trying to deploy in kubernetes? https://www.youtube.com/watch?v=288rTpd1SDE

error while kubeadm join??? use below commands restart and 
sudo kubeadm reset
rm -rf /var/lib/cni/
sudo rm -rf /var/lib/cni/
systemctl daemon-reload
systemctl restart kubelet
sudo iptables -F && sudo iptables -t nat -F && sudo iptables -t mangle -F && sudo iptables -X
